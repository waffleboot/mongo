/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/dbtests/framework_options_gen.h --output build/opt/mongo/dbtests/framework_options_gen.cpp src/mongo/dbtests/framework_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/dbtests/framework_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/auth/authorization_contract.h"
#include "mongo/db/commands.h"
#include "mongo/idl/command_generic_argument.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


Status addTestFrameworkOptions(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    options
        .addOptionChaining("help", "help,h", moe::Switch, "Show this usage information", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("dbpath", "dbpath", moe::String, "db data path for this test run. NOTE: the contents of this directory will be overwritten if it already exists", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setDefault(moe::Value("/tmp/unittest"))
    ;

    options
        .addOptionChaining("debug", "debug", moe::Switch, "Run tests with verbose output", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("list", "list,l", moe::Switch, "List available test suites", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("filter", "filter,f", moe::String, "String substring filter on test name", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("verbose", "verbose,v", moe::Switch, "Verbose", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("dur", "dur", moe::Switch, "Enable journaling (currently the default)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("nodur", "nodur", moe::Switch, "Disable journaling", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("seed", "seed", moe::UnsignedLongLong, "Random number seed", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("runs", "runs", moe::Int, "Number of times to run each test", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("perfHist", "perfHist", moe::Unsigned, "Number of back runs of perf stats to display", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("replication.enableMajorityReadConcern", "enableMajorityReadConcern", moe::Bool, "Enables majority readConcern", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setDefault(moe::Value(true))
    ;

    options
        .addOptionChaining("storage.engine", "storageEngine", moe::String, "What storage engine to use", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setDefault(moe::Value("wiredTiger"))
    ;

    options
        .addOptionChaining("enableFlowControl", "flowControl", moe::Bool, "Whether Flow Control is enabled", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setDefault(moe::Value(true))
    ;

    options
        .addOptionChaining("setParameter", "setParameter", moe::StringMap, "Set a configurable parameter", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .composing()
    ;

    options
        .addOptionChaining("suites", "suites", moe::StringVector, "Test suites to run", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .hidden()
        .positional(1, -1)
    ;

    return Status::OK();
}

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_1a09d3bb9d201cb7d362d6ea9d34e68a07079182)(InitializerContext*) {
    [[maybe_unused]] const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("filter")) {
        frameworkGlobalParams.filter = params["filter"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("seed")) {
        frameworkGlobalParams.seed = params["seed"].as<moe::OptionTypeMap<moe::UnsignedLongLong>::type>();
    }

    if (params.count("runs")) {
        frameworkGlobalParams.runsPerTest = params["runs"].as<moe::OptionTypeMap<moe::Int>::type>();
    }

    if (params.count("perfHist")) {
        frameworkGlobalParams.perfHist = params["perfHist"].as<moe::OptionTypeMap<moe::Unsigned>::type>();
    }

    if (params.count("suites")) {
        frameworkGlobalParams.suites = params["suites"].as<moe::OptionTypeMap<moe::StringVector>::type>();
    }

}
}  // namespace 

}  // namespace mongo
