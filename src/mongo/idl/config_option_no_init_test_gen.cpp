/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/idl/config_option_no_init_test_gen.h --output build/opt/mongo/idl/config_option_no_init_test_gen.cpp src/mongo/idl/config_option_no_init_test.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/idl/config_option_no_init_test_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/auth/authorization_contract.h"
#include "mongo/db/commands.h"
#include "mongo/idl/command_generic_argument.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {
namespace test {

std::string gTestConfigNoInitOpt1;

Status addIDLTestConfigs(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    options
        .addOptionChaining("test.config.noInit.opt1", "testConfigNoInitOpt1", moe::String, "Basic option using explicit call register/store", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    return Status::OK();
}

Status storeIDLTestConfigs(const optionenvironment::Environment& params) {
    namespace moe = ::mongo::optionenvironment;

    if (params.count("test.config.noInit.opt1")) {
        gTestConfigNoInitOpt1 = params["test.config.noInit.opt1"].as<std::string>();
    }

    return Status::OK();
}

}  // namespace test
}  // namespace mongo
