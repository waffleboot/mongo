/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/idl/config_option_test_gen.h --output build/opt/mongo/idl/config_option_test_gen.cpp src/mongo/idl/config_option_test.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/idl/config_option_test_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/auth/authorization_contract.h"
#include "mongo/db/commands.h"
#include "mongo/idl/command_generic_argument.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {
namespace test {

std::string gTestConfigOpt12;
#if 1 == 1
std::string gTestConfigOpt14;
#endif
std::string gTestConfigOpt15;

namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(TestConfigs)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    options
        .addOptionChaining("test.config.opt1", "testConfigOpt1", moe::Switch, "Basic switch", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("test.config.opt2", "testConfigOpt2", moe::Bool, "Boolean option without implicit value", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("test.config.opt3", "testConfigOpt3", moe::Bool, "Boolean option with implicit value", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setImplicit(moe::Value(true))
    ;

    options
        .addOptionChaining("test.config.opt4", "testConfigOpt4", moe::String, "String option with a default value", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setDefault(moe::Value("Default Value"))
    ;

    options
        .addOptionChaining("test.config.opt5", "testConfigOpt5", moe::Int, "Int option only settable from INI", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceINIConfig)
    ;

    options
        .addOptionChaining("testConfigOpt6", "testConfigOpt6", moe::String, "Positional string argument", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAllLegacy)
        .hidden()
        .positional(1, 1)
    ;

    options
        .addOptionChaining("testConfigOpt7", "testConfigOpt7", moe::StringVector, "Muilti-value positional string arguments", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .hidden()
        .positional(2, -1)
    ;

    options
        .addOptionChaining("test.config.opt8", "testConfigOpt8", moe::Long, "Option with deprecated names", {"test.config.opt8a", "test.config.opt8b"}, {"testConfigOpt8a", "testConfigOpt8b"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceYAMLCLI)
    ;

    options
        .addOptionChaining("test.config.opt9", "testConfigOpt9", moe::Unsigned, "Option with dependencies", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .requiresOption("test.config.opt9a")
        .incompatibleWith("test.config.opt9b")
    ;

    options
        .addOptionChaining("test.config.opt9a", "testConfigOpt9a", moe::Long, "Required with opt9", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("test.config.opt9b", "testConfigOpt9b", moe::UnsignedLongLong, "Conflicts with opt9", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("test.config.opt10a", "testConfigOpt10a", moe::Int, "Integer from 0 to 100 exclusive", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("test.config.opt10a", 0, 100, boost::none, boost::none))
    ;

    options
        .addOptionChaining("test.config.opt10b", "testConfigOpt10b", moe::Int, "Integer from 0 to 100 inclusive", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("test.config.opt10b", boost::none, boost::none, 0, 100))
    ;

    options
        .addOptionChaining("test.config.opt11", "testConfigOpt11", moe::Int, "Odd integer (callback test)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("test.config.opt11", validateOdd))
    ;

    options
        .addOptionChaining("test.config.opt12", "testConfigOpt12", moe::String, "Test declared storage", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("test.config.opt13", "testConfigOpt13,o", moe::String, "Test with single name", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

#if 1 == 1
    if (gEnableTestConfigOpt14) {
        options
            .addOptionChaining("test.config.opt14", "testConfigOpt14", moe::String, "Test with preprocessor and runtime conditions positive", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
        ;
    }
#endif

    if (gEnableTestConfigOpt15) {
        options
            .addOptionChaining("test.config.opt15", "testConfigOpt15", moe::String, "Test with runtime condition negative", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
        ;
    }

    options
        .addOptionChaining("test.config.opt16", "testConfigOpt16", moe::String, "Test redacted configurations", {"test.config.opt16depr", "test.config.opt16depr2"}, {"testConfigOpt16depr", "testConfigOpt16depr2"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .redact()
    ;

    options
        .addOptionChaining("test.config.opt17", "testConfigOpt17", moe::Int, "Test c++ expressions in default, implicit, validator", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setDefault(moe::Value(([]{ constexpr auto value = kTestConfigOpt17Default; return value; })()))
        .setImplicit(moe::Value(([]{ constexpr auto value = kTestConfigOpt17Implicit; return value; })()))
        .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("test.config.opt17", boost::none, boost::none, kTestConfigOpt17Minimum, ([]{ constexpr auto value = kTestConfigOpt17Maximum; return value; })()))
    ;

}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(TestConfigs)(InitializerContext*) {
    [[maybe_unused]] const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("test.config.opt12")) {
        gTestConfigOpt12 = params["test.config.opt12"].as<std::string>();
    }

#if 1 == 1
    if (gEnableTestConfigOpt14) {
        if (params.count("test.config.opt14")) {
            gTestConfigOpt14 = params["test.config.opt14"].as<std::string>();
        }
    }
#endif

    if (gEnableTestConfigOpt15) {
        if (params.count("test.config.opt15")) {
            gTestConfigOpt15 = params["test.config.opt15"].as<std::string>();
        }
    }

}
}  // namespace 

}  // namespace test
}  // namespace mongo
