/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/tools/mongobridge_options_gen.h --output build/opt/mongo/tools/mongobridge_options_gen.cpp src/mongo/tools/mongobridge_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/tools/mongobridge_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/auth/authorization_contract.h"
#include "mongo/db/commands.h"
#include "mongo/idl/command_generic_argument.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_b53067692f54c652bb0d081da65ac5e477b8d8a4)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    options
        .addOptionChaining("help", "help", moe::Switch, "show this usage information", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("port", "port", moe::Int, "port to listen on for MongoDB messages", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("seed", "seed", moe::Long, "random seed to use", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("dest", "dest", moe::String, "URI of remote MongoDB process", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
    ;

    options
        .addOptionChaining("vebose", "verbose", moe::String, "log more verbose output", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceCommandLine)
        .setImplicit(moe::Value("v"))
    ;

}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_b53067692f54c652bb0d081da65ac5e477b8d8a4)(InitializerContext*) {
    [[maybe_unused]] const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("port")) {
        mongoBridgeGlobalParams.port = params["port"].as<moe::OptionTypeMap<moe::Int>::type>();
    }

    if (params.count("dest")) {
        mongoBridgeGlobalParams.destUri = params["dest"].as<moe::OptionTypeMap<moe::String>::type>();
    }

}
}  // namespace 

}  // namespace mongo
